import os
import re

TTL_FILE_EXTENSION = ".ttl"


class TTLRenderer:
    def __init__(self, template_directory):
        self.template_directory = template_directory
        self.templates = self.load_template()
        self.template_names = list(self.templates.keys()) + ["root"]

        self.used_templates = set()

    def separate_html_and_css(self, template_content):
        # Regular expression to find style content
        css_pattern = re.compile(r"<style>(.*?)</style>", re.DOTALL)
        # Extract CSS
        css = css_pattern.findall(template_content)
        # Join all CSS parts if there are multiple style tags (unlikely in this case, but just to cover all bases)
        css = "\n".join(css)
        # Remove the style element from the template content to get HTML
        html = re.sub(css_pattern, "", template_content)
        return html.strip(), css.strip()

    def generate_css(self):
        css = ""
        for template_name in self.used_templates:
            css += self.templates[template_name]["css"]
        return f"{css}\n"

    def load_template(self):
        templates = {}
        for file in os.listdir(self.template_directory):
            if file.endswith(TTL_FILE_EXTENSION):
                name = file.split(".")[0]
                with open(os.path.join(self.template_directory, file), "r") as f:
                    template_content = f.read()

                template_html, template_css = self.separate_html_and_css(
                    template_content
                )

                templates[name] = {
                    "html": template_html,
                    "css": template_css,
                }
        return templates

    def render_template(self, key, properties):
        if key not in self.template_names:
            raise ValueError(f"Template {key} not found")

        required_properties = re.findall(
            r"\{\{\s*(\w+)\s*\}\}", self.templates[key]["html"]
        )
        handled_properties = {}
        for prop in properties:
            if prop[0] not in required_properties:
                raise ValueError(f"Property {prop[0]} not found in template {key}")
            handled_properties[prop[0]] = prop[1]

        for prop in required_properties:
            if prop not in handled_properties:
                raise ValueError(f"Property {prop} not found in properties")

        for property, values in handled_properties.items():
            if len(values) == 1 and isinstance(values[0], str):
                handled_properties[property] = values[0]
            else:
                html = "".join(
                    [
                        self.render_tree(value) if isinstance(value, tuple) else value
                        for value in values
                    ]
                )
                handled_properties[property] = html

        template_copy = self.templates[key]["html"]
        for prop, value in handled_properties.items():
            pattern = re.compile(r"\{\{\s*" + re.escape(prop) + r"\s*\}\}")
            template_copy = pattern.sub(value, template_copy)
        self.used_templates.add(key)
        return template_copy

    def render_tree(self, tree):
        left, right = tree
        return self.render_template(left, right)

    def render_document(self, tree):
        body = "".join([self.render_tree(child) for child in tree[1]])
        indented_body = "\n".join([f"\t{line}" for line in body.splitlines()])
        css = self.generate_css()
        indented_css = "\n".join([f"\t{line}" for line in css.splitlines()])

        result = "<!DOCTYPE html>\n"
        result += "<html>\n"
        result += "<head>\n"
        result += "<meta charset='UTF-8' />\n"
        result += (
            "<meta name='viewport' content='width=device-width, initial-scale=1.0' />\n"
        )
        result += "<style>\n"
        result += indented_css + "\n"
        result += "</style>\n"
        result += "</head>\n"
        result += "<body>\n"
        result += indented_body + "\n"
        result += "</body>\n"
        result += "<!-- File Generated by Trevor's Templating Language -->\n"
        return result
